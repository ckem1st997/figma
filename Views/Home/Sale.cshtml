@*@model IEnumerable<figma.Models.Products>*@
@model PaginatedList<figma.Models.Products>
@{
    ViewData["Title"] = "Sale";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Sale</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Sale" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-success" /> |
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
               ID
            </th>
            <th>
                <a asp-action="Sale" asp-route-sortOrder="@ViewData["NameSortParm"]">Name</a>
            </th>
            <th>
                <a asp-action="Sale" asp-route-sortOrder="@ViewData["DateSortParm"]">Date</a>
            </th>
            <th>
                <a asp-action="Sale" asp-route-sortOrder="@ViewData["PriceSortParm"]">Price</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreateDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Sale"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-success @prevDisabled">
    Previous
</a>
<a asp-action="Sale"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-success @nextDisabled">
    Next
</a>
